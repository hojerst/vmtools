#!/bin/bash

set -e

##############################################################################
# functions
##############################################################################
die() {
    echo 1>&2 "ERROR:" "$@"
    exit 1
}

usage() {
    cat <<EOF
NAME
    vmcreate - create a virtual machine from an image

SYNOPSIS
    vmcreate [options] name

OPTIONS
    --disksize=<size>   disk size in GB
    --memsize=<size>    memory size in MB
    --vcpus=<count>     number of virtual cpus
    --image=<name>      name of image to use
EOF
    exit 1
}

# render a template
render() {
    TEMPLATE="$1"
    shift

    local "$@"

    eval "cat <<TEMPLATE
$(<$TEMPLATE)
TEMPLATE"
}

# parse positional parameter
parsepositional() {
    local pos="$1"
    local arg="$2"

    case "$pos" in
        x)
            NAME="$arg"
            ;;
        *)
            echo 1>&2 "unknown argument: '$arg'"
            exit 1
            ;;
    esac
}

# parse arguments
parseargs() {
    local pos="x"

    while [ $# -ge 1 ] ; do
        case "$1" in
            --help)
                usage
                ;;
            --disksize=*)
                DISKSIZE="${1##*=}"
                ;;
            --memsize=*)
                MEMSIZE="${1##*=}"
                ;;
            --vcpus=*)
                VCPUS="${1##*=}"
                ;;
            --image=*)
                IMAGE="${1##*=}"
                ;;
            --)
                shift
                break
                ;;
            --*)
                echo 1>&2 "unknown option '$1' - ignored."
                ;;
            *)
                parsepositional "$pos" "$1"
                pos="x$pos"
                ;;
        esac
        shift
    done

    # parse remaining positional arguments
    while [ $# -ge 1 ] ; do
        parsepositional "$pos" "$1"
        pos="x$pos"
        shift
    done

    # check if all positional arguments where provided
    if [ "$pos" != "xx" ] ; then
        echo 1>&2 "missing/insufficient arguments."
        echo
        usage
    fi
}

callhook() {
    readonly hook="$1"
    shift

    env NAME="$NAME" CONFDIR="$CONFDIR" "$hook" "$@"
}


to_bytes() {
    readonly input="$1"
    local size
    case "$input" in
        *m)
            size="${input%*m}"
            echo "$((size*1000*1000))"
        ;;
        *g)
            size="${input%*g}"
            echo "$((size*1000*1000*1000))"
        ;;
        *k)
            size="${input%*k}"
            echo "$((size*1000))"
        ;;
        *M)
            size="${input%*M}"
            echo "$((size*1024*1024))"
        ;;
        *G)
            size="${input%*G}"
            echo "$((size*1024*1024*1024))"
        ;;
        *K)
            size="${input%*K}"
            echo "$((size*1024))"
        ;;
        *)
            die "unknown unit in input: '$input'"
        ;;
    esac
}

##############################################################################
# configuration
##############################################################################
readonly CONFDIR="$HOME/.vmtools"
readonly IMAGEDIR="$CONFDIR/images"

# defaults
POOL=default
MEMSIZE=512M
DISKSIZE=2G
VCPUS=1

# read config file (if it exists)
if [ -r "$CONFDIR/config" ] ; then
    source "$CONFDIR/config"
fi

# parse arguments
parseargs "$@"

# calculate sizes in bytes
MEMSIZE_BYTES="$(to_bytes "$MEMSIZE")"
DISKSIZE_BYTES="$(to_bytes "$DISKSIZE")"

##############################################################################
# sanity checks
##############################################################################
[ $DISKSIZE_BYTES -ge 2147483648 ] || die "disk size must be at least 2 gb"
[ $MEMSIZE_BYTES -ge 536870912 ] || die "memory size must be at least 512 mb"
[ $VCPUS -ge 1 ] || die "need at least one cpu"
[ -z "$IMAGE" ] && die "no --image provided"
[ -d $IMAGEDIR/$IMAGE ] || die "image $IMAGE not found"
[ ! -e "/dev/$POOL/$NAME" ] || die "disk for vm $NAME already exists"
virsh dominfo "$NAME" >/dev/null 2>&1 && die "vm $NAME already exists"

##############################################################################
# work dir
##############################################################################
WORKDIR=$(mktemp -d /tmp/vmcreateXXXXXX)
trap "rm -rf -- '$WORKDIR'" EXIT

##############################################################################
# summary
##############################################################################
echo "creating vm $NAME:"
echo "  memory: $MEMSIZE ($MEMSIZE_BYTES bytes)"
echo "  disk:   $DISKSIZE ($DISKSIZE_BYTES bytes)"
echo "  cpus:   $VCPUS"
echo "  image:  $IMAGE"
echo
echo "continue [Y/n]? "
read answer
if [ "$answer" != "y" ] && [ "$answer" != "Y" ] && [ "$answer" != "" ] ; then
    exit 0
fi

##############################################################################
# main
##############################################################################

cd "$IMAGEDIR/$IMAGE"

echo "creating disk"
virsh vol-create-as --pool "$POOL" --name "$NAME" --capacity "$DISKSIZE_BYTES" || die "can't create volume"
DISKPATH=$(virsh vol-path --pool "$POOL" "$NAME")

echo "installing disk image"
if [ -x ./install-disk.sh ] ; then
    callhook ./install-disk.sh disk1.img "$DISKPATH"
else
    qemu-img convert disk1.img "$DISKPATH" -O raw
fi

echo "creating vm"
render "node.xml" NAME="$NAME" MEMORY="$MEMSIZE_BYTES" VCPUS="$VCPUS" DISKPATH="$DISKPATH" >$WORKDIR/node.xml
virsh define "$WORKDIR/node.xml"

echo "starting vm"
virsh start "$NAME"
virsh autostart "$NAME"
