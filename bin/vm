#!/bin/bash

set -e

##############################################################################
# configuration
##############################################################################

readonly CONFDIR="$HOME/.vmtools"

# defaults
VMTOOLSDIR="$(cd $(dirname "${BASH_SOURCE[0]}")/.. && pwd)"
SUBCOMMANDDIR="$VMTOOLSDIR/share/vmtools/subcommands"
IMAGEPATH="$CONFDIR/images:$VMTOOLSDIR/share/vmtools/images"
IMAGEPOOL=images
POOL=default
MEMSIZE=512M
VCPUS=1
ATTACH=n
DRY_RUN=n
FORCE=n
REMOVESTORAGE=n
DOMAIN=

# read config file (if it exists)
if [ -r "$CONFDIR/config" ] ; then
    source "$CONFDIR/config"
fi

##############################################################################
# common functions
##############################################################################
die() {
    echo 1>&2 "$(basename "$0"):" "$@"
    exit 1
}

# render a template
render() {
    TEMPLATE="$1"
    shift

    local "$@"

    eval "cat <<TEMPLATE
$(<$TEMPLATE)
TEMPLATE"
}

to_bytes() {
    readonly input="$1"
    local size
    case "$input" in
        *b)
            size="${input%*b}"
            echo "$size"
        ;;
        *m)
            size="${input%*m}"
            echo "$((size*1000*1000))"
        ;;
        *g)
            size="${input%*g}"
            echo "$((size*1000*1000*1000))"
        ;;
        *k)
            size="${input%*k}"
            echo "$((size*1000))"
        ;;
        *M)
            size="${input%*M}"
            echo "$((size*1024*1024))"
        ;;
        *G)
            size="${input%*G}"
            echo "$((size*1024*1024*1024))"
        ;;
        *K)
            size="${input%*K}"
            echo "$((size*1024))"
        ;;
        *)
            die "unknown unit in input: '$input'"
        ;;
    esac
}

get_size() {
    local file="$1"

    wc -c "$file" | sed -e 's/  */ /g' -e "s/^ //" | cut -f1 -d" "
}

get_device() {
    local ALPHA=abcdefghijklmnopqrstuvwxyz
    echo vd${ALPHA:$i:1}
}

# find image directory according to IMAGEPATH
find_imagedir() {
    local image="$1"

    IFS=':' read -r -a imagepath <<<"$IMAGEPATH"

    for imagedir in "${imagepath[@]}" ; do
        if [ -r "$imagedir/$image/info" ] ; then
            echo "$imagedir/$image"
            return 0
        fi
    done

    return 1
}

# list all images
list_images() {
    IFS=':' read -r -a imagepath <<<"$IMAGEPATH"
    for imagedir in "${imagepath[@]}" ; do
        for image in "$imagedir/"* ; do
            if [ -r "$image"/info ] ; then
                basename "$image"
            fi
        done
    done | sort | uniq
}

##############################################################################
# main: subcommand selection
##############################################################################

# parse command
if [ $# -lt 1 ] ; then
    die "missing subcommand - '$0 help' for a list of valid commands"
fi

# extract subcommand from arguments
subcommand="$1"
shift

if [ "$subcommand" = "--help" ] ; then
    subcommand=help
fi

# check that subcommand is alphanumeric or underscore
if [[ "$subcommand" =~ [^a-zA-Z0-9_] ]]; then
    die "invalid subcommand: $subcommand"
fi

# check if subcommand exists
if [ ! -r "$SUBCOMMANDDIR/$subcommand.sh" ] ; then
    die "unknown subcommand: $subcommand"
fi

readonly SUBCOMMAND="$subcommand"

# load subcommand definitions
source "$SUBCOMMANDDIR/$SUBCOMMAND.sh"

# run subcommand
main "$@"